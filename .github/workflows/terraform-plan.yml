name: 'Terraform Pull Request Plan'

on:
  pull_request:
    branches: [ main ]

jobs:
  terraform:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment:
      azure-dev
    env:
      TF_WORKING_DIR: ./terraform/
      TF_VAR_az_subscription_id: ${{ secrets.az_subscription_id }}
      TF_VAR_az_client_id: ${{ secrets.az_client_id }}
      TF_VAR_az_client_secret: ${{ secrets.az_client_secret }}
      TF_VAR_az_tenant_id: ${{ secrets.az_tenant_id }}
      TF_VAR_info_project: ${{ secrets.info_project }}
      TF_VAR_info_environment: ${{ secrets.info_environment }}
      TF_VAR_az_location: ${{ secrets.az_location }}
      TF_VAR_az_analytics_retention: ${{ secrets.az_analytics_retention }}
      TF_VAR_aks_node_data: ${{ secrets.aks_node_data }}
      TF_VAR_win_admin_password: ${{ secrets.win_admin_password }}
      TF_VAR_win_admin_username: ${{ secrets.win_admin_username }}
      TF_VAR_linux_admin_username: ${{ secrets.linux_admin_username }}
      TF_VAR_linux_admin_ssh_key: ${{ secrets.linux_admin_ssh_key }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.TF_WORKING_DIR }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the specific version of Terraform CLI.
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.4

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      id: format
      continue-on-error: true

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      id: init    

    - name: Terraform Validate
      run: terraform validate -no-color
      id: validate

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
      id: plan

    # Add execution plan in a Pull Request discution 
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token : ${{ secrets.GITHUB_TOKEN }}
        script: | 
          const output = `#### Terraform Format and Style üñå\`${{ steps.format.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`${process.env.PLAN}\`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      

    # On push to main, build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    #- name: Terraform Apply
    #  if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #  run: terraform apply -auto-approve
